{"version":3,"sources":["components/binaryTree/BinaryTree.js","components/binaryNode/BinaryNode.js","components/binaryNode/NodeComponent.jsx","components/binaryTree/TreeComponent.jsx","components/appHeader/AppHeader.jsx","App.js","index.js"],"names":["BinaryTree","value","this","rootNode","treeMap","node","insertChildNode","level","values","push","mapObj","total","reduce","t","v","Number","average","length","updateTreeMap","leftNode","left","rightNode","right","traverse","BinaryNode","NodeComponent","props","type","className","TreeComponent","onClickHandler","nodeValue","nodeInput","current","state","bTree","insertNode","forceUpdate","onKeyDownHandler","e","keyCode","onTraverseHandler","Promise","resove","reject","tMap","tLevels","m","then","newTreeSummary","console","log","setState","prevState","treeSummary","catch","React","createRef","summaryList","map","item","i","key","toFixed","summaryContainer","min","ref","onKeyDown","onClick","Component","AppHeader","App","ReactDOM","render","document","getElementById"],"mappings":"uRA+CeA,G,iBA7Cb,WAAYC,GAAQ,oBAClBC,KAAKC,SAAW,KAChBD,KAAKE,QAAU,G,uDAGNC,GACLH,KAAKC,SACPD,KAAKC,SAASG,gBAAgBD,EAAM,GAEpCH,KAAKC,SAAWE,I,oCAINA,EAAME,GAClB,GAAIL,KAAKE,QAAQG,GACfL,KAAKE,QAAQG,GAAOC,OAAOC,KAAKJ,EAAKJ,WAChC,CACL,IAAIS,EAAS,CACXH,MAAOA,EACPC,OAAQ,CAACH,EAAKJ,QAEhBC,KAAKE,QAAQG,GAASG,EAExBR,KAAKE,QAAQG,GAAOI,MAAQT,KAAKE,QAAQG,GAAOC,OAAOI,QACrD,SAACC,EAAGC,GAAJ,OAAUC,OAAOF,GAAKE,OAAOD,MAE/BZ,KAAKE,QAAQG,GAAOS,QAClBD,OAAOb,KAAKE,QAAQG,GAAOI,OAAST,KAAKE,QAAQG,GAAOC,OAAOS,S,iCAExB,IAAlCZ,EAAiC,uDAA1BH,KAAKC,SAAUI,EAAW,uDAAH,EACrCL,KAAKgB,cAAcb,EAAME,GACzB,IAAIY,EAAWd,EAAKe,MAAQ,KACxBC,EAAYhB,EAAKiB,OAAS,MAC1BH,GAAYE,OACZd,EACEY,GACFjB,KAAKqB,SAASJ,EAAUZ,GAEtBc,GACFnB,KAAKqB,SAASF,EAAWd,Q,MChBlBiB,E,WAxBb,WAAYvB,GAAQ,oBAClBC,KAAKD,MAAQA,EACbC,KAAKkB,KAAO,KACZlB,KAAKoB,MAAQ,K,4DAGCjB,GACVA,EAAKJ,MAAQC,KAAKD,QACF,OAAdC,KAAKkB,KACPlB,KAAKkB,KAAKd,gBAAgBD,GAE1BH,KAAKkB,KAAOf,GAGZA,EAAKJ,MAAQC,KAAKD,QACD,OAAfC,KAAKoB,MACPpB,KAAKoB,MAAMhB,gBAAgBD,GAE3BH,KAAKoB,MAAQjB,O,KCLNoB,G,MAXO,SAAhBA,EAAiBC,GAAW,IACxBrB,EAAeqB,EAAfrB,KAAMsB,EAASD,EAATC,KACd,OACE,yBAAKC,UAAW,iBAAmBD,GACjC,8BAAOtB,EAAKJ,OACXI,EAAKe,MAAQ,kBAACK,EAAD,CAAeE,KAAK,OAAOtB,KAAMA,EAAKe,OACnDf,EAAKiB,OAAS,kBAACG,EAAD,CAAeE,KAAK,QAAQtB,KAAMA,EAAKiB,WCuG7CO,E,kDAxGb,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IAaRI,eAAiB,WACf,IAAIC,EAAY,EAAKC,UAAUC,QAAQhC,MACvC,GAAI8B,EAAY,EAAG,CACjB,IAAI1B,EAAO,IAAImB,EAAWO,GAC1B,EAAKG,MAAMC,MAAMC,WAAW/B,GAC5B,EAAK2B,UAAUC,QAAQhC,MAAQ,GAC/B,EAAKoC,gBApBU,EAuBnBC,iBAAmB,SAACC,GACA,KAAdA,EAAEC,SACJ,EAAKV,kBAzBU,EA4BnBW,kBAAoB,WAEH,IAAIC,SAAQ,SAACC,EAAQC,GAElC,GADA,EAAKV,MAAMC,MAAMZ,WACb,EAAKW,MAAMC,MAAM/B,QAAS,CAC5B,IAAIyC,EAAO,EAAKX,MAAMC,MAAM/B,QACxB0C,EAAU,GACd,IAAK,IAAIC,KAAKF,EACZC,EAAQrC,KAAKoC,EAAKE,IAEpBJ,EAAOG,QAEPF,EAAO,uBAIRI,MAAK,SAACC,GACLC,QAAQC,IAAI,qCAAsCF,GAClD,EAAKG,UAAS,SAACC,GAAD,MAAgB,CAC5BC,YAAaL,SAGhBM,OAAM,SAAChB,GAAD,OAAOW,QAAQC,IAAI,mBAAoBZ,OAhDhD,EAAKP,UAAYwB,IAAMC,YACvB,EAAKvB,MAAQ,CACXH,UAAW,EACXI,MAAO,IAAInC,GAEb,EAAKkC,MAAMoB,YAAc,GAPR,E,qDAsDjB,IAAMnD,EAAWD,KAAKgC,MAAMC,MAAMhC,UAAY,KAE1CuD,EACFxD,KAAKgC,MAAMoB,aACXpD,KAAKgC,MAAMoB,YAAYrC,OAAS,GAChCf,KAAKgC,MAAMoB,YAAYK,KAAI,SAACC,EAAMC,GAChC,OACE,wBAAIC,IAAKD,GACP,0BAAMjC,UAAU,SAAhB,WAAiCgC,EAAKrD,OACtC,0BAAMqB,UAAU,WAAhB,WACWb,OAAO6C,EAAKjD,OAAOoD,QAAQ,IAEtC,0BAAMnC,UAAU,WAAhB,aACab,OAAO6C,EAAK5C,SAAS+C,QAAQ,QAK9CC,EACF9D,KAAKgC,MAAMoB,aAAepD,KAAKgC,MAAMoB,YAAYrC,OAAS,EACxD,yBAAKW,UAAU,WACb,6BACE,sCACA,4BAAK8B,KAIT,8BAEJ,OACE,yBAAK9B,UAAU,iBACb,yBAAKA,UAAU,eACb,2BACED,KAAK,SACLsC,IAAI,IACJC,IAAKhE,KAAK8B,UACVmC,UAAWjE,KAAKoC,mBAElB,4BAAQ8B,QAASlE,KAAK4B,gBAAtB,UACA,4BAAQsC,QAASlE,KAAKuC,mBAAtB,YAEDuB,EACD,yBAAKpC,UAAU,YACZzB,GAAY,kBAAC,EAAD,CAAewB,KAAK,OAAOtB,KAAMF,U,GAlG5BkE,aCQbC,EAXG,SAAC5C,GACjB,OACE,oCACE,yBAAKE,UAAU,aAAf,eACA,yBAAKA,UAAU,cACb,kBAAC,EAAD,SCCO2C,EARH,WACV,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,QCDN4C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2e02faa3.chunk.js","sourcesContent":["// import BinaryNode from \"../binaryNode/BinaryNode\";\nclass BinaryTree {\n  constructor(value) {\n    this.rootNode = null;\n    this.treeMap = {};\n  }\n\n  insertNode(node) {\n    if (this.rootNode) {\n      this.rootNode.insertChildNode(node, 1);\n    } else {\n      this.rootNode = node;\n    }\n  }\n\n  updateTreeMap(node, level) {\n    if (this.treeMap[level]) {\n      this.treeMap[level].values.push(node.value);\n    } else {\n      let mapObj = {\n        level: level,\n        values: [node.value],\n      };\n      this.treeMap[level] = mapObj;\n    }\n    this.treeMap[level].total = this.treeMap[level].values.reduce(\n      (t, v) => Number(t) + Number(v)\n    );\n    this.treeMap[level].average =\n      Number(this.treeMap[level].total) / this.treeMap[level].values.length;\n  }\n  traverse(node = this.rootNode, level = 1) {\n    this.updateTreeMap(node, level);\n    let leftNode = node.left || null;\n    let rightNode = node.right || null;\n    if (leftNode || rightNode) {\n      ++level;\n      if (leftNode) {\n        this.traverse(leftNode, level);\n      }\n      if (rightNode) {\n        this.traverse(rightNode, level);\n      }\n    }\n  }\n}\n\nexport default BinaryTree;\n","class BinaryNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  insertChildNode(node) {\n    if (node.value < this.value) {\n      if (this.left !== null) {\n        this.left.insertChildNode(node);\n      } else {\n        this.left = node;\n      }\n    }\n    if (node.value > this.value) {\n      if (this.right !== null) {\n        this.right.insertChildNode(node);\n      } else {\n        this.right = node;\n      }\n    }\n  }\n}\n\nexport default BinaryNode;\n","import React from \"react\";\nimport \"./css/NodeComponent.css\";\n\nconst NodeComponent = (props) => {\n  const { node, type } = props;\n  return (\n    <div className={\"nodeComponent \" + type}>\n      <span>{node.value}</span>\n      {node.left && <NodeComponent type=\"left\" node={node.left} />}\n      {node.right && <NodeComponent type=\"right\" node={node.right} />}\n    </div>\n  );\n};\n\nexport default NodeComponent;\n","import React, { Component } from \"react\";\n\nimport \"./css/TreeComponent.css\";\nimport BinaryTree from \"./BinaryTree\";\nimport BinaryNode from \"../binaryNode/BinaryNode\";\nimport NodeComponent from \"../binaryNode/NodeComponent\";\n\nclass TreeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.nodeInput = React.createRef();\n    this.state = {\n      nodeValue: 0,\n      bTree: new BinaryTree(),\n    };\n    this.state.treeSummary = [];\n  }\n  // onChangeHandler = (e) => {\n  //   this.setState({\n  //     nodeValue: e.target.value,\n  //   });\n  // };\n  onClickHandler = () => {\n    let nodeValue = this.nodeInput.current.value;\n    if (nodeValue > 0) {\n      let node = new BinaryNode(nodeValue);\n      this.state.bTree.insertNode(node);\n      this.nodeInput.current.value = \"\";\n      this.forceUpdate();\n    }\n  };\n  onKeyDownHandler = (e) => {\n    if (e.keyCode === 13) {\n      this.onClickHandler();\n    }\n  };\n  onTraverseHandler = () => {\n    // this.state.bTree.traverse();\n    var tPromise = new Promise((resove, reject) => {\n      this.state.bTree.traverse();\n      if (this.state.bTree.treeMap) {\n        let tMap = this.state.bTree.treeMap;\n        let tLevels = [];\n        for (let m in tMap) {\n          tLevels.push(tMap[m]);\n        }\n        resove(tLevels);\n      } else {\n        reject(\"Error in TreeMap\");\n      }\n    });\n    tPromise\n      .then((newTreeSummary) => {\n        console.log(\"Promise Success: newTreeSummary : \", newTreeSummary);\n        this.setState((prevState) => ({\n          treeSummary: newTreeSummary,\n        }));\n      })\n      .catch((e) => console.log(\"Promise Error : \", e));\n  };\n\n  render() {\n    const rootNode = this.state.bTree.rootNode || null;\n\n    let summaryList =\n      this.state.treeSummary &&\n      this.state.treeSummary.length > 0 &&\n      this.state.treeSummary.map((item, i) => {\n        return (\n          <li key={i}>\n            <span className=\"level\">Level : {item.level}</span>\n            <span className=\"content\">\n              Total : {Number(item.total).toFixed(0)}\n            </span>\n            <span className=\"content\">\n              Average : {Number(item.average).toFixed(2)}\n            </span>\n          </li>\n        );\n      });\n    let summaryContainer =\n      this.state.treeSummary && this.state.treeSummary.length > 0 ? (\n        <div className=\"summary\">\n          <div>\n            <p>Summary</p>\n            <ul>{summaryList}</ul>\n          </div>\n        </div>\n      ) : (\n        <div></div>\n      );\n    return (\n      <div className=\"treeComponent\">\n        <div className=\"controlArea\">\n          <input\n            type=\"number\"\n            min=\"1\"\n            ref={this.nodeInput}\n            onKeyDown={this.onKeyDownHandler}\n          ></input>\n          <button onClick={this.onClickHandler}>Insert</button>\n          <button onClick={this.onTraverseHandler}>Summary</button>\n        </div>\n        {summaryContainer}\n        <div className=\"treeView\">\n          {rootNode && <NodeComponent type=\"root\" node={rootNode} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TreeComponent;\n","import React from \"react\";\nimport \"./css/AppHeader.css\";\nimport TreeComponent from \"../binaryTree/TreeComponent\";\n\nconst AppHeader = (props) => {\n  return (\n    <>\n      <div className=\"appHeader\">BINARY TREE</div>\n      <div className=\"binaryTree\">\n        <TreeComponent />\n      </div>\n    </>\n  );\n};\n\nexport default AppHeader;\n","import React from \"react\";\nimport AppHeader from \"./components/appHeader/AppHeader\";\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <AppHeader />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}