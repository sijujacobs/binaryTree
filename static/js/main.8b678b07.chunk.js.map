{"version":3,"sources":["components/binaryTree/BinaryTree.js","components/binaryNode/BinaryNode.js","components/binaryNode/NodeComponent.jsx","components/binaryTree/TreeSummary.jsx","components/binaryTree/TreeComponent.jsx","components/appHeader/AppHeader.jsx","App.js","index.js"],"names":["BinaryTree","value","this","rootNode","treeMap","node","insertChildNode","level","values","push","mapObj","total","reduce","t","v","Number","average","length","updateTreeMap","leftNode","left","rightNode","right","traverse","BinaryNode","NodeComponent","props","type","className","TreeSummary","summary","map","s","i","key","toFixed","TreeComponent","onClickHandler","nodeValue","nodeInput","current","state","bTree","insertNode","forceUpdate","onKeyDownHandler","e","keyCode","showSummary","setState","prevState","showList","getSummary","Promise","resove","reject","tMap","tLevels","m","then","newTreeSummary","console","log","treeSummary","catch","React","createRef","min","ref","onKeyDown","onClick","CSSTransition","in","timeout","classNames","unmountOnExit","appear","onEntered","listSwitch","onExit","Component","AppHeader","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8b678b07.chunk.js","sourcesContent":["// import BinaryNode from \"../binaryNode/BinaryNode\";\nclass BinaryTree {\n  constructor(value) {\n    this.rootNode = null;\n    this.treeMap = {};\n  }\n\n  insertNode(node) {\n    if (this.rootNode) {\n      this.rootNode.insertChildNode(node, 1);\n    } else {\n      this.rootNode = node;\n    }\n  }\n\n  updateTreeMap(node, level) {\n    if (this.treeMap[level]) {\n      this.treeMap[level].values.push(node.value);\n    } else {\n      let mapObj = {\n        level: level,\n        values: [node.value],\n      };\n      this.treeMap[level] = mapObj;\n    }\n    this.treeMap[level].total = this.treeMap[level].values.reduce(\n      (t, v) => Number(t) + Number(v)\n    );\n    this.treeMap[level].average =\n      Number(this.treeMap[level].total) / this.treeMap[level].values.length;\n  }\n  traverse(node = this.rootNode, level = 1) {\n    this.updateTreeMap(node, level);\n    let leftNode = node.left || null;\n    let rightNode = node.right || null;\n    if (leftNode || rightNode) {\n      ++level;\n      if (leftNode) {\n        this.traverse(leftNode, level);\n      }\n      if (rightNode) {\n        this.traverse(rightNode, level);\n      }\n    }\n  }\n}\n\nexport default BinaryTree;\n","class BinaryNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  insertChildNode(node) {\n    if (node.value < this.value) {\n      if (this.left !== null) {\n        this.left.insertChildNode(node);\n      } else {\n        this.left = node;\n      }\n    }\n    if (node.value > this.value) {\n      if (this.right !== null) {\n        this.right.insertChildNode(node);\n      } else {\n        this.right = node;\n      }\n    }\n  }\n}\n\nexport default BinaryNode;\n","import React from \"react\";\nimport \"./css/NodeComponent.css\";\n\nconst NodeComponent = (props) => {\n  const { node, type } = props;\n  return (\n    <div className={\"nodeComponent \" + type}>\n      <span>{node.value}</span>\n      {node.left && <NodeComponent type=\"left\" node={node.left} />}\n      {node.right && <NodeComponent type=\"right\" node={node.right} />}\n    </div>\n  );\n};\n\nexport default NodeComponent;\n","import React from \"react\";\n\nconst TreeSummary = (props) => {\n  const { summary } = props;\n  return (\n    <div>\n      <p>Summary</p>\n      <table className=\"summaryTable\">\n        <thead>\n          <tr>\n            <th>Level</th>\n            <th>Total</th>\n            <th>Average</th>\n          </tr>\n        </thead>\n        <tbody>\n          {summary &&\n            summary.length > 0 &&\n            summary.map((s, i) => {\n              return (\n                <tr key={i}>\n                  <td className=\"level\">{s.level}</td>\n                  <td className=\"content\">{Number(s.total).toFixed(0)}</td>\n                  <td className=\"content\">{Number(s.average).toFixed(2)}</td>\n                </tr>\n              );\n            })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nexport default TreeSummary;\n\n// <table className=\"summaryTable\">\n// <thead>\n//   <tr>\n//     <th>Level</th>\n//     <th>Total</th>\n//     <th>Average</th>\n//   </tr>\n// </thead>\n// <tbody>\n//   {summary &&\n//     summary.length > 0 &&\n//     summary.map((s, i) => {\n//       return (\n//         <tr key={i}>\n//           <td className=\"level\">{s.level}</td>\n//           <td className=\"content\">{Number(s.total).toFixed(0)}</td>\n//           <td className=\"content\">{Number(s.average).toFixed(2)}</td>\n//         </tr>\n//       );\n//     })}\n// </tbody>\n// </table>\n","import React, { Component } from \"react\";\n\nimport \"./css/TreeComponent.css\";\nimport BinaryTree from \"./BinaryTree\";\nimport BinaryNode from \"../binaryNode/BinaryNode\";\nimport NodeComponent from \"../binaryNode/NodeComponent\";\nimport TreeSummary from \"./TreeSummary\";\n\nimport { CSSTransition } from \"react-transition-group\";\nclass TreeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.nodeInput = React.createRef();\n    this.state = {\n      nodeValue: 0,\n      bTree: new BinaryTree(),\n      showSummary: false,\n    };\n    this.state.treeSummary = [];\n  }\n  // onChangeHandler = (e) => {\n  //   this.setState({\n  //     nodeValue: e.target.value,\n  //   });\n  // };\n  onClickHandler = () => {\n    let nodeValue = this.nodeInput.current.value;\n    if (nodeValue > 0) {\n      let node = new BinaryNode(nodeValue);\n      this.state.bTree.insertNode(node);\n      this.nodeInput.current.value = \"\";\n      this.forceUpdate();\n    }\n  };\n  onKeyDownHandler = (e) => {\n    if (e.keyCode === 13) {\n      this.onClickHandler();\n    }\n  };\n\n  showSummary = () => {\n    this.setState((prevState) => ({\n      showList: !prevState.showList,\n    }));\n    this.getSummary();\n  };\n  getSummary = () => {\n    var tPromise = new Promise((resove, reject) => {\n      this.state.bTree.traverse();\n      if (this.state.bTree.treeMap) {\n        let tMap = this.state.bTree.treeMap;\n        let tLevels = [];\n        for (let m in tMap) {\n          tLevels.push(tMap[m]);\n        }\n        resove(tLevels);\n      } else {\n        reject(\"Error in TreeMap\");\n      }\n    });\n    tPromise\n      .then((newTreeSummary) => {\n        console.log(\"Promise Success: newTreeSummary : \", newTreeSummary);\n        this.setState((prevState) => ({\n          treeSummary: newTreeSummary,\n        }));\n      })\n      .catch((e) => console.log(\"Promise Error : \", e));\n  };\n\n  render() {\n    const rootNode = this.state.bTree.rootNode || null;\n    return (\n      <div className=\"treeComponent\">\n        <div className=\"controlArea\">\n          <input\n            type=\"number\"\n            min=\"1\"\n            ref={this.nodeInput}\n            onKeyDown={this.onKeyDownHandler}\n          ></input>\n          <button onClick={this.onClickHandler}>Insert</button>\n          <button onClick={this.showSummary}>Summary</button>\n        </div>\n        <CSSTransition\n          in={this.state.showList}\n          timeout={400}\n          classNames=\"list-transition\"\n          unmountOnExit\n          appear\n          onEntered={this.listSwitch}\n          onExit={this.listSwitch}\n        >\n          <TreeSummary summary={this.state.treeSummary} />\n        </CSSTransition>\n        <div className=\"treeView\">\n          {rootNode && <NodeComponent type=\"root\" node={rootNode} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TreeComponent;\n","import React from \"react\";\nimport \"./css/AppHeader.css\";\nimport TreeComponent from \"../binaryTree/TreeComponent\";\n\nconst AppHeader = (props) => {\n  return (\n    <>\n      <div className=\"appHeader\">BINARY TREE</div>\n      <div className=\"binaryTree\">\n        <TreeComponent />\n      </div>\n    </>\n  );\n};\n\nexport default AppHeader;\n","import React from \"react\";\nimport AppHeader from \"./components/appHeader/AppHeader\";\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <AppHeader />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}