{"version":3,"sources":["components/binaryTree/BinaryTree.js","components/binaryNode/BinaryNode.js","components/binaryNode/NodeComponent.jsx","components/binaryTree/TreeComponent.jsx","components/appHeader/AppHeader.jsx","App.js","index.js"],"names":["BinaryTree","value","this","rootNode","node","insertChildNode","BinaryNode","left","right","NodeComponent","props","type","className","TreeComponent","onClickHandler","nodeValue","nodeInput","current","state","bTree","insertNode","forceUpdate","onKeyDownHandler","e","keyCode","React","createRef","min","ref","onKeyDown","onClick","Component","AppHeader","App","ReactDOM","render","document","getElementById"],"mappings":"uRAeeA,G,iBAbb,WAAYC,GAAQ,oBAClBC,KAAKC,SAAW,K,uDAGPC,GACLF,KAAKC,SACPD,KAAKC,SAASE,gBAAgBD,EAAM,GAEpCF,KAAKC,SAAWC,M,MCePE,E,WAxBb,WAAYL,GAAQ,oBAClBC,KAAKD,MAAQA,EACbC,KAAKK,KAAO,KACZL,KAAKM,MAAQ,K,4DAGCJ,GACVA,EAAKH,MAAQC,KAAKD,QACF,OAAdC,KAAKK,KACPL,KAAKK,KAAKF,gBAAgBD,GAE1BF,KAAKK,KAAOH,GAGZA,EAAKH,MAAQC,KAAKD,QACD,OAAfC,KAAKM,MACPN,KAAKM,MAAMH,gBAAgBD,GAE3BF,KAAKM,MAAQJ,O,KCLNK,G,MAXO,SAAhBA,EAAiBC,GAAW,IACxBN,EAAeM,EAAfN,KAAMO,EAASD,EAATC,KACd,OACE,yBAAKC,UAAW,iBAAmBD,GACjC,8BAAOP,EAAKH,OACXG,EAAKG,MAAQ,kBAACE,EAAD,CAAeE,KAAK,OAAOP,KAAMA,EAAKG,OACnDH,EAAKI,OAAS,kBAACC,EAAD,CAAeE,KAAK,QAAQP,KAAMA,EAAKI,WC+C7CK,E,kDAhDb,WAAYH,GAAQ,IAAD,8BACjB,cAAMA,IAYRI,eAAiB,WACf,IAAIC,EAAY,EAAKC,UAAUC,QAAQhB,MACvC,GAAIc,EAAY,EAAG,CACjB,IAAIX,EAAO,IAAIE,EAAWS,GAC1B,EAAKG,MAAMC,MAAMC,WAAWhB,GAC5B,EAAKiB,gBAlBU,EAqBnBC,iBAAmB,SAACC,GACA,KAAdA,EAAEC,SACJ,EAAKV,kBArBP,EAAKE,UAAYS,IAAMC,YACvB,EAAKR,MAAQ,CACXH,UAAW,EACXI,MAAO,IAAInB,GALI,E,qDA4BjB,IAAMG,EAAWD,KAAKgB,MAAMC,MAAMhB,UAAY,KAC9C,OACE,yBAAKS,UAAU,iBACb,yBAAKA,UAAU,eACb,2BACED,KAAK,SACLgB,IAAI,IACJC,IAAK1B,KAAKc,UACVa,UAAW3B,KAAKoB,mBAElB,4BAAQQ,QAAS5B,KAAKY,gBAAtB,WAEF,yBAAKF,UAAU,YACZT,GAAY,kBAAC,EAAD,CAAeQ,KAAK,OAAOP,KAAMD,U,GA1C5B4B,aCQbC,EAXG,SAACtB,GACjB,OACE,oCACE,yBAAKE,UAAU,aAAf,eACA,yBAAKA,UAAU,cACb,kBAAC,EAAD,SCCOqB,EARH,WACV,OACE,yBAAKrB,UAAU,OACb,kBAAC,EAAD,QCDNsB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.df92212d.chunk.js","sourcesContent":["// import BinaryNode from \"../binaryNode/BinaryNode\";\nclass BinaryTree {\n  constructor(value) {\n    this.rootNode = null;\n  }\n\n  insertNode(node) {\n    if (this.rootNode) {\n      this.rootNode.insertChildNode(node, 1);\n    } else {\n      this.rootNode = node;\n    }\n  }\n}\n\nexport default BinaryTree;\n","class BinaryNode {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n  }\n\n  insertChildNode(node) {\n    if (node.value < this.value) {\n      if (this.left !== null) {\n        this.left.insertChildNode(node);\n      } else {\n        this.left = node;\n      }\n    }\n    if (node.value > this.value) {\n      if (this.right !== null) {\n        this.right.insertChildNode(node);\n      } else {\n        this.right = node;\n      }\n    }\n  }\n}\n\nexport default BinaryNode;\n","import React from \"react\";\nimport \"./css/NodeComponent.css\";\n\nconst NodeComponent = (props) => {\n  const { node, type } = props;\n  return (\n    <div className={\"nodeComponent \" + type}>\n      <span>{node.value}</span>\n      {node.left && <NodeComponent type=\"left\" node={node.left} />}\n      {node.right && <NodeComponent type=\"right\" node={node.right} />}\n    </div>\n  );\n};\n\nexport default NodeComponent;\n","import React, { Component } from \"react\";\n\nimport \"./css/TreeComponent.css\";\nimport BinaryTree from \"./BinaryTree\";\nimport BinaryNode from \"../binaryNode/BinaryNode\";\nimport NodeComponent from \"../binaryNode/NodeComponent\";\n\nclass TreeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.nodeInput = React.createRef();\n    this.state = {\n      nodeValue: 0,\n      bTree: new BinaryTree(),\n    };\n  }\n  // onChangeHandler = (e) => {\n  //   this.setState({\n  //     nodeValue: e.target.value,\n  //   });\n  // };\n  onClickHandler = () => {\n    let nodeValue = this.nodeInput.current.value;\n    if (nodeValue > 0) {\n      let node = new BinaryNode(nodeValue);\n      this.state.bTree.insertNode(node);\n      this.forceUpdate();\n    }\n  };\n  onKeyDownHandler = (e) => {\n    if (e.keyCode === 13) {\n      this.onClickHandler();\n    }\n  };\n\n  render() {\n    const rootNode = this.state.bTree.rootNode || null;\n    return (\n      <div className=\"treeComponent\">\n        <div className=\"controlArea\">\n          <input\n            type=\"number\"\n            min=\"1\"\n            ref={this.nodeInput}\n            onKeyDown={this.onKeyDownHandler}\n          ></input>\n          <button onClick={this.onClickHandler}>Insert</button>\n        </div>\n        <div className=\"treeView\">\n          {rootNode && <NodeComponent type=\"root\" node={rootNode} />}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TreeComponent;\n","import React from \"react\";\nimport \"./css/AppHeader.css\";\nimport TreeComponent from \"../binaryTree/TreeComponent\";\n\nconst AppHeader = (props) => {\n  return (\n    <>\n      <div className=\"appHeader\">BINARY TREE</div>\n      <div className=\"binaryTree\">\n        <TreeComponent />\n      </div>\n    </>\n  );\n};\n\nexport default AppHeader;\n","import React from \"react\";\nimport AppHeader from \"./components/appHeader/AppHeader\";\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <AppHeader />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}